#!/usr/bin/env bash

## Title:       timertab
## Description: An easy way to manage all of your systemd timers
## Author:      Andrew Lamarra
## Created:     2/8/2017
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#######################################################################

set -e

# Defining some variables for font color
BW='\e[1;37m'  # Bold White
UW='\e[4;37m'  # Underline White
RST='\e[0m'    # Text color Reset

# Set the path for when the --user option is specified
USER_PATH="$HOME/.config/systemd/user/"

# Text printing function
function info {  # Equivalent to echo -e
    printf '%b\n' "$@"
}

# Make sure systemd is installed
command -v systemctl >/dev/null 2>&1 || { info \
"\nI require Systemd, but it's not installed.  Aborting.\n" >&2; exit 1; }

function disp_usage {
    info "\nUsage:  $0 [-u|--user] COMMAND [ARGUMENT...]" >&2
    info "For more help:  $0 help\n" >&2
    exit 1
}

# If no commands are supplied, display usage & exit
if [[ $# -eq 0 ]] || [[ $# -eq 1 && ( $1 == "-u" || $1 == "--user" ) ]]; then
    disp_usage
fi

# Make sure the user isn't using too many commands
if [[ ( $1 != "-u" && $1 != "--user" ) && $# -gt 2 ]]; then
    info "\nOnly use one option at a time\n"
    disp_usage
elif [[ ( $1 == "-u" || $1 == "--user" ) && $# -gt 3 ]]; then
    info "\nOnly use one option at a time (not including the user option)\n"
    disp_usage
fi

function disp_help {
cat << EOF

Manage your Systemd Timers
Usage: $0 [-u|--user] COMMAND [ARGUMENT...]
Only use one command at a time

  -u, --user         Deal only with user timers (not run as root)

The .timer extension is optional when specifying a timer name.
COMMANDS:
  -h|--help|help     Display this help dialog
  list               List the current timers
  new [NAME...]      Create a new timer
  enable [NAME...]   Enable timer
  start [NAME...]    Start timer
  stop [NAME...]     Stop timer
  status [NAME...]   Display the status of a specific timer
  disable [NAME...]  Disable timer
  remove [NAME...]   Remove (delete) timer and/or associated service files
  modify [NAME...]   Opens the .timer file for editing in vi
  run [NAME...]      Run a command in a transient (temporary) timer
  convert            Convert a cron job into a Systemd timer

EOF
    exit 0
}

function timer_options {
cat << EOF
AccuracySec=
    Specify the accuracy the timer shall elapse with. Defaults to 1min.
    echo
RandomizedDelaySec=
    Delay the timer by a randomly selected, evenly distributed amount of time
    between 0 and the specified time value. Defaults to 0, indicating that no
    randomized delay shall be applied.
    echo
Persistent=(true|false)
    If true, the time when the service was last triggered is stored on disk.
    The service unit is triggered immediately if the next run is missed.
    This is useful to catch up on missed runs of the service when the machine
    was off. Only use with OnCalendar= (realtime timers). Defaults to false.
    echo
WakeSystem=(true|false)
    If true, an elapsing timer will cause the system to resume from suspend,
    should it be suspended and if the system supports this. Defaults to false.
    echo
RemainAfterElapse=(true|false)
    If true, an elapsed timer will stay loaded, and its state remains queriable.
    If false, an elapsed timer unit that cannot elapse anymore is unloaded.
    Turning this off is particularly useful for transient timer units that shall
    disappear after they first elapse. Defaults to true.

EOF
}

function time_syntax {
cat << EOF
VALUE [UNIT]
    If no time unit is specified, seconds are assumed.

Possible units:
    usec, us
    msec, ms
    seconds, second, sec, s
    minutes, minute, min, m
    hours, hour, hr, h
    days, day, d
    weeks, week, w
    months, month, M (defined as 30.44 days)
    years, year, y (defined as 365.25 days)
Examples:
    2 h
    2hours
    48hr
    1y 12month
    55s500ms
    300ms20s 5day

EOF
}

function calendar_syntax {
cat << EOF
Examples for valid timestamps and their normalized form:

  Sat,Thu,Mon..Wed,Sat..Sun → Mon..Thu,Sat,Sun *-*-* 00:00:00
      Mon,Sun 12-*-* 2,1:23 → Mon,Sun 2012-*-* 01,02:23:00
                    Wed *-1 → Wed *-*-01 00:00:00
           Wed..Wed,Wed *-1 → Wed *-*-01 00:00:00
                 Wed, 17:48 → Wed *-*-* 17:48:00
Wed..Sat,Tue 12-10-15 1:2:3 → Tue..Sat 2012-10-15 01:02:03
                *-*-7 0:0:0 → *-*-07 00:00:00
                      10-15 → *-10-15 00:00:00
        monday *-12-* 17:00 → Mon *-12-* 17:00:00
  Mon,Fri *-*-3,1,2 *:30:45 → Mon,Fri *-*-01,02,03 *:30:45
       12,14,13,12:20,10,30 → *-*-* 12,13,14:10,20,30:00
            12..14:10,20,30 → *-*-* 12,13,14:10,20,30:00
  mon,fri *-1/2-1,3 *:30:45 → Mon,Fri *-01/2-01,03 *:30:45
             03-05 08:05:40 → *-03-05 08:05:40
                   08:05:40 → *-*-* 08:05:40
                      05:40 → *-*-* 05:40:00
     Sat,Sun 12-05 08:05:40 → Sat,Sun *-12-05 08:05:40
           Sat,Sun 08:05:40 → Sat,Sun *-*-* 08:05:40
           2003-03-05 05:40 → 2003-03-05 05:40:00
 05:40:23.4200004/3.1700005 → 05:40:23.420000/3.170001
             2003-02..04-05 → 2003-02,03,04-05 00:00:00
       2003-03-05 05:40 UTC → 2003-03-05 05:40:00 UTC
                 2003-03-05 → 2003-03-05 00:00:00
                      03-05 → *-03-05 00:00:00
                     hourly → *-*-* *:00:00
                      daily → *-*-* 00:00:00
                  daily UTC → *-*-* 00:00:00 UTC
                    monthly → *-*-01 00:00:00
                     weekly → Mon *-*-* 00:00:00
                     yearly → *-01-01 00:00:00
                   annually → *-01-01 00:00:00
                      *:2/3 → *-*-* *:02/3:00

EOF
}

function list_timers {
    if [[ -n $user ]]; then # If the user option is set
        systemctl --user list-timers --all
    else
        systemctl list-timers --all
    fi
    echo
    exit 0
}

function get_name {
    name="$1"
    # Prompt user for the name of the timer
    if [[ -z $1 ]]; then
        read -rp "Name of timer: " name
        echo
    fi

    # Add the .timer extension if the user didn't specify it
    if [[ $(echo "$name" | rev | cut -d '.' -f 1 | rev) != "timer" ]]; then
        timer_prefix="$name"
        name="$name.timer"
    else
        timer_prefix="$(echo "$name" | rev | cut -d '.' -f 2- | rev)"
    fi
}

function get_srvc_name {
    # Prompt user for the name of the service
    read -rp "Name of service: " srvc_name
    echo

    # Add the .service extension if the user didn't specify it
    if [[ $(echo "$srvc_name" | rev | cut -d '.' -f 1 | rev) != "service" ]]; then
        srvc_prefix="$srvc_name"
        srvc_name="$srvc_name.service"
    else
        srvc_prefix="$(echo "$srvc_name" | rev | cut -d '.' -f 2- | rev)"
    fi
}

function get_path {
    # Set the path variable
    if [[ -n $user ]]; then # If the user option is set
        path=$USER_PATH
    else
        read -rp "Path to the timer: (/etc/systemd/system/) " path
        if [[ $path == '' ]]; then
            path="/etc/systemd/system/"
        # If the user left off the slash at the end, then add it
        elif [[ ${path: -1} != '/' ]]; then
            path="$path/"
        fi
        echo
    fi
}

function get_srvc_path {
    # Set the srvc_path variable
    if [[ -n $user ]]; then # If the user option is set
        srvc_path=$USER_PATH
    else
        read -rp "Path to the service: (/etc/systemd/system/) " srvc_path
        if [[ $srvc_path == '' ]]; then
            srvc_path="/etc/systemd/system/"
        # If the user didn't add a slash at the end, add it for them
        elif [[ ${srvc_path: -1} != '/' ]]; then
            srvc_path="$srvc_path/"
        fi
        echo
    fi
}

function create_service_file {
    info "[Unit]\nDescription=$Description\n" > "$srvc_file"
    info "[Service]\nExecStart=$ExecStart" >> "$srvc_file"

    info "${BW}The following service file has been created:${RST} $srvc_file\n"
}

function enable_timer {
    get_name "$1"

    # Try enabling the timer
    if [[ -n $user ]]; then # If the user option is set
        systemctl --user enable "$name"
    else
        systemctl enable "$name"
    fi
    info "$name has been enabled\n"
}

function start_timer {
    get_name "$1"

    # Try starting the timer
    if [[ -n $user ]]; then # If the user option is set
        systemctl --user start "$name"
    else
        systemctl start "$name"
    fi
    info "$name has been started\n"
}

function stop_timer {
    get_name "$1"

    # Try stopping the timer
    if [[ -n $user ]]; then # If the user option is set
        systemctl --user stop "$name"
    else
        systemctl stop "$name"
    fi
    info "$name has been stopped\n"

    exit 0
}

function status_timer {
    get_name "$1"

    # Display the status of a specific timer
    if [[ -n $user ]]; then
        systemctl --user status "$name"
    else
        systemctl status "$name"
    fi

    exit 0
}

function disable_timer {
    get_name "$1"
    get_path
    timer_file="$path$name"

    # Check if the timer exists
    if [[ ! -e $timer_file ]]; then
        info "That timer ($timer_file) does not exist\n" >&2
        exit 1
    else # If so, then disable it
        if [[ -n $user ]]; then # If the user option is set
            systemctl --user disable "$name"
        else
            systemctl disable "$name"
        fi
        info "$name has been disabled\n"
    fi

    exit 0
}

function remove_timer {
    get_name "$1"
    get_path
    timer_file="$path$name"

    # Prompt to remove associated service file
    while [[ $ans != 'y' ]] && [[ $ans != 'n' ]]; do
        read -rp "Remove the associated service file of the same name? (y/N) " ans
        ans=$(echo "$ans" | tr '[:upper:]' '[:lower:]')
        if [[ $ans == '' ]]; then ans="n"; fi
    done
    echo

    # If the timer file doesn't exist & the user wants to remove the service
    # file, then let the script continue instead of exiting
    if [[ $ans == 'y' ]]; then set +e; fi

    # Attempt to remove the timer file
    rm "$timer_file"
    if [[ $? == '0' ]]; then
        info "\n$name has been removed from $path"
    fi

    # Attempt to remove the service file
    if [[ $ans == 'y' ]]; then
        # First, remove the .timer extension
        prefix=$(echo "$name" | rev | cut -d '.' -f 2- | rev)
        rm "$path$prefix.service"
        if [[ $? == '0' ]]; then
            echo "$prefix.service has been removed from $path"
        fi
    fi

    echo
    exit 0
}

function modify_timer {
    get_name "$1"
    get_path

    # Open the .timer file in the default editor specified by $EDITOR.
    # If that variable is not set, open in vi
    "${EDITOR:-vi}" "$path$name"

    exit 0
}

function timer_type {
    echo 'Create a realtime or monotonic timer?'
    PS3='Make a selection: '
    options=("Realtime" "Monotonic")
    select type in "${options[@]}"
    do
        case $type in
            "Realtime") break;;
            "Monotonic") break;;
            *) echo "Invalid option";;
        esac
    done
    echo
}

function new_timer {
    get_name "$1"
    get_path

    # Create the directory, if necessary
    if [[ -n $user ]]; then mkdir -p $path; fi

    info "Let's create a new timer called \"$name\"\n"
    timer_file="$path$name"

    # Prompt the user to see if we need to set the Unit= option.
    while [[ $existing != 'y' && $existing != 'n' ]]; do
        read -rp "Will this timer control an existing service? (y/N) " existing
        existing="$(echo "$existing" | tr '[:upper:]' '[:lower:]')"
        if [[ $existing == '' ]]; then existing='n'; fi
        echo
    done

    # If yes, then gather more information
    if [[ $existing == 'y' ]]; then
        get_srvc_name
        get_srvc_path
        srvc_file="$srvc_path$srvc_name"

        # If the service file doesn't exist, give the user a second chance
        if [[ ! -e $srvc_file ]]; then
            echo "That service file does not exist in the specified path ($srvc_path)"
            read -rp "Would you like to provide a different name & path? (Y/n) " ans
            ans="$(echo "$ans" | tr '[:upper:]' '[:lower:]')"
            if [[ $ans == '' || $ans == 'y' ]]; then
                get_srvc_name
                get_srvc_path
                srvc_file="$srvc_path$srvc_name"
            fi
            if [[ ! -e $srvc_file ]]; then
                info "\nWell, the service file ($srvc_file) does not exist."
                echo "Let's continue for now, but the timer will not work."
            fi
        fi

    # If no, then just set the appropriate variables
    elif [[ $existing == 'n' ]]; then
        srvc_prefix="$timer_prefix"
        srvc_name="$timer_prefix.service"
        srvc_path="$path"
        srvc_file="$srvc_path$srvc_name"
    fi

    # Creating the timer file & adding the description
    info "\n${UW}Let's create the timer file${RST}\n"
    read -rp "<$name> Description: " Description
    info "[Unit]\nDescription=$Description\n\n[Timer]" > "$timer_file"

    # What type of timer will this be?
    info '\nRealtime timers will activate at a specific time or day.'
    info 'Monotonic timers will activate at specific intervals.\n'
    timer_type

    # Setting timer frequencies
    if [[ $type == "Monotonic" ]]; then
        echo '(simply enter "s" without quotes to display the syntax)'
        read -rp 'How long should the timer wait after boot before being activated? ' OnBootSec

        while [[ "$OnBootSec" == "s" ]]; do
            echo
            time_syntax
            read -rp 'How long should the timer wait after boot before being activated? ' OnBootSec
        done
        echo
        read -rp 'How frequently should the timer be activated after that? ' OnUnitActiveSec
        echo

        # Add this information to the timer file
        info "OnBootSec=$OnBootSec\nOnUnitActiveSec=$OnUnitActiveSec" >> "$timer_file"
    elif [[ $type == "Realtime" ]]; then
        echo '(simply enter "s" without quotes to display the syntax)'
        read -rp 'Enter the calendar event expression: ' OnCalendar

        if [[ "$OnCalendar" == "s" ]]; then
            echo
            calendar_syntax
            read -rp 'Enter the calendar event expression: ' OnCalendar
        fi
        info "OnCalendar=$OnCalendar" >> "$timer_file"
        echo
    fi

    # Prompt user for additional options for the timer
    echo 'Additional timer options:'
    PS3='Make a selection: '
    options=("AccuracySec=" "RandomizedDelaySec=" "Persistent=" "WakeSystem="
        "RemainAfterElapse=" "Display options help" "Done adding options")
    select opts in "${options[@]}"
    do
        case $opts in
            "AccuracySec=")
                read -rp 'Specify accuracy: (VALUE [UNIT]) ' AccuracySec
                echo;;
            "RandomizedDelaySec=")
                read -rp 'Randomized delay: (VALUE [UNIT]) ' RandomizedDelaySec;
                echo;;
            "Persistent=")
                Persistent=true;
                info 'Adding Persistent=true\n';;
            "WakeSystem=")
                WakeSystem=true;
                info 'Adding WakeSystem=true\n';;
            "RemainAfterElapse=")
                RemainAfterElapse=false;
                info 'Adding RemainAfterElapse=false\n';;
            "Display options help")
                echo;
                timer_options;;
            "Done adding options")
                break;;
            *) info "Invalid option\n";;
        esac
    done

    if [[ -n $AccuracySec ]]; then
        echo "AccuracySec=$AccuracySec" >> "$timer_file"; fi
    if [[ -n $RandomizedDelaySec ]]; then
        echo "RandomizedDelaySec=$RandomizedDelaySec" >> "$timer_file"; fi
    if [[ -n $Persistent ]]; then
        echo "Persistent=$Persistent" >> "$timer_file"; fi
    if [[ -n $WakeSystem ]]; then
        echo "WakeSystem=$WakeSystem" >> "$timer_file"; fi
    if [[ -n $RemainAfterElapse ]]; then
        echo "RemainAfterElapse=$RemainAfterElapse" >> "$timer_file"; fi

    # The Unit= option is only used if the service being activated
    # is not the same name as the timer
    if [[ $srvc_prefix != "$timer_prefix" ]]; then
        echo "Unit=$srvc_file" >> "$timer_file"
    fi

    # Add the [Install] section
    info '\n[Install]\nWantedBy=timers.target' >> "$timer_file"
    info "\n${BW}The following timer file has been created:${RST} $timer_file\n"

    if [[ $existing == 'n' ]]; then
        # Creating the service file
        info "\n${UW}Let's create the service file${RST}"
        read -rp "<$srvc_name> Description: " Description
        info 'What command or script should the service run?'
        read -rp '(Absolute path only): ' ExecStart
        echo

        create_service_file
    fi

    # Prompt the user to start/enable the timer
    read -rp "Start the timer now and enable it to run on boot? (y/N) " ans
    echo
    ans="$(echo "$ans" | tr '[:upper:]' '[:lower:]')"
    if [[ $ans == 'y' ]]; then
        enable_timer "$name"
        start_timer "$name"
    fi

    exit 0
}

function run_timer {
    # What type of timer will this be?
    echo "A Realtime transient timer will actiavate at a specific time or day."
    echo "  It is also reoccurring until it is stopped or there is a reboot."
    echo "A Monotonic transient timer will only activate"\
    "once after the specified amount of time."
    echo
    timer_type

    # Setting timer frequencies
    if [[ $type == "Monotonic" ]]; then
        echo '(simply enter "s" without quotes to display the syntax)'
        read -rp 'When should the timer activate? ' active
        while [[ "$active" == "s" ]]; do
            echo
            time_syntax
            read -rp 'When should the timer activate? ' active
        done
        echo
        
        # If there are spaces but no quotes, then add quotes
        if [[ $active == *" "* ]]; then
            if [[ $active != \"* ]]; then active="\"$active"; fi
            if [[ $active != *\" ]]; then active="$active\""; fi
        fi
        
        arg="--on-active=$active"
    elif [[ $type == "Realtime" ]]; then
        echo '(simply enter "s" without quotes to display the syntax)'
        read -rp 'Enter the calendar event expression: ' oncal
        while [[ "$oncal" == "s" ]]; do
            echo
            calendar_syntax
            read -rp 'Enter the calendar event expression: ' oncal
        done
        echo

        # If there are spaces but no quotes, then add quotes
        if [[ $oncal == *" "* ]]; then
            if [[ $oncal != \"* ]]; then oncal="\"$oncal"; fi
            if [[ $oncal != *\" ]]; then oncal="$oncal\""; fi
        fi
        
        arg="--on-calendar=$oncal"
    fi

    # Prompt the user for the name of the command
    read -rp "Enter the command to activate: " command
    cmd=($command)
    echo

    # Run the command
    if [[ -n $1 ]]; then  # If a name was passed with the command
        
        # If the user specified the .timer extension, then remove it
        if [[ $1 == *.timer ]]; then
            name=$(echo $1 | rev | cut -d '.' -f 2- | rev)
        else name="$1"; fi
        
        if [[ -n $user ]]; then  # If the user option is set
            systemd-run --user --unit="$name" "$arg" "${cmd[@]}"
        else systemd-run --unit="$name" "$arg" "${cmd[@]}"; fi
    else
        if [[ -n $user ]]; then  # If the user option is set
            systemd-run --user "$arg" "${cmd[@]}"
        else systemd-run "$arg" "${cmd[@]}"; fi
    fi
    
    exit 0
}

function convert {
    # Save the contents of crontab to a variable
    # If no crontab exists, then exit the script
    if ! crons=$(crontab -l); then echo; exit 1; fi

    # Strip the crontab file to just the list of cron jobs
    crons=$(echo "$crons" | grep '[^[:blank:]]' | grep -v '^#' | tr '\t' ' ')

    # If no cron jobs are enabled, then exit
    if [[ -z "$crons" ]]; then
        echo "no cron jobs are enabled for $USER" >&2
        exit 1
    fi

    # Save each line to an array called 'lines'
    IFS=$'\r\n' GLOBIGNORE='*' command eval 'lines=($(echo "$crons"))'

    # Display each cron job
    for i in "${!lines[@]}"
    do
        echo "$(( i + 1 )).  ${lines[$i]}"
    done
    #echo "$(($i + 2)).  All"
    echo

    # Prompt the user for which job to convert to a timer
    while [[ $job -lt 1 || $job -gt ${#lines[@]} ]]; do
        read -rp 'Select which cron job to convert to a timer: ' job
    done
    echo

    #for i in "${lines[@]}"; do    For ALL cron jobs
    job=$(( job - 1 ))   # Because array elements start at 0
    # min hour dom month dow
    min=$(echo "${lines[$job]}" | cut -d ' ' -f 1)
    hour=$(echo "${lines[$job]}" | cut -d ' ' -f 2)
    dom=$(echo "${lines[$job]}" | cut -d ' ' -f 3)
    month=$(echo "${lines[$job]}" | cut -d ' ' -f 4)
    dow=$(echo "${lines[$job]}" | cut -d ' ' -f 5)
    ExecStart=$(echo "${lines[$job]}" | cut -d ' ' -f 6-)

    if [[ $dow == "*" ]]; then
        dow=''
    else
        # Convert the integers used by Cron to the DoW abbreviations used in Timers (and add a space at the end)
        dow="$(echo $dow | sed -e 's/0/Sun/g;s/1/Mon/g;s/2/Tue/g;s/3/Wed/g;s/4/Thu/g;s/5/Fri/g;s/6/Sat/g;s/-/../g') "
    fi

    # If a single digit was used, add a zero before it
    if [[ ${#min} -eq 1 && $min != "*" ]]; then min="0$min"; fi
    if [[ ${#hour} -eq 1 && $hour != "*" ]]; then hour="0$hour"; fi
    if [[ ${#dom} -eq 1 && $dom != "*" ]]; then dom="0$dom"; fi
    if [[ ${#month} -eq 1 && $month != "*" ]]; then month="0$month"; fi

    OnCalendar="$dow*-$month-$dom $hour:$min:00"

    # extract the name of the command to use as the name of the timer
    timer_prefix=$(echo "$ExecStart" | cut -d ' ' -f 1 | rev | cut -d '/' -f 1 | rev)
    name="$timer_prefix.timer"

    # Set the path variable
    if [[ -n $user ]]; then # If the user option is set
        path=$USER_PATH
    else
        path="/etc/systemd/system/"
    fi
    timer_file="$path$name"
    Description='This timer file has been automatically generated from a cron job using the timertab program'

    # Creating the timer file
    info "[Unit]\nDescription=$Description\n" > "$timer_file"
    info "[Timer]\nOnCalendar=$OnCalendar\n" >> "$timer_file"
    info "[Install]\nWantedBy=timers.target" >> "$timer_file"
    info "\n${BW}The following timer file has been created:${RST} $timer_file"

    # Setting some variables & creating the service file
    srvc_file="$path$timer_prefix.service"
    Description='This service file has been automatically generated from a cron job using the timertab program'
    create_service_file

    exit 0
}

# Parsing the command & argument
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -u|--user ) user=true;;
        -h|--help|help ) disp_help;;
        list ) list_timers;;
        run ) run_timer "$2";;
        new ) new_timer "$2";;
        enable ) enable_timer "$2"; exit 0;;
        start ) start_timer "$2"; exit 0;;
        stop ) stop_timer "$2";;
        status ) status_timer "$2";;
        disable ) disable_timer "$2";;
        remove ) remove_timer "$2";;
        modify ) modify_timer "$2";;
        convert ) convert "$2";;
        # list_opts is for the completion script
        list_opts ) echo "-u --user -h --help help list new enable start stop status disable remove modify run convert";;
        * ) disp_usage;;
    esac
    shift
done

# Features to implement:
#   - Allow user to convert all cron jobs into timers at once
#   - Convert function can prompt user if they'd like to create a detailed timer
#     (prompting for things like the name instead of assuming it)

# Known issues:
#   - Unable to convert user cron jobs to root level timers
#     Workaround:
#     Do the conversion with --user and move the files
#         from ~/.config/systemd/user/ to /etc/systemd/system/
